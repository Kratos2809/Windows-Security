import os
import sys
import hashlib
import requests
from pathlib import Path
from dotenv import load_dotenv
from time import sleep

# Load environment variables
load_dotenv()

class MalwareScanner:
    def __init__(self):
        self.api_key = os.getenv('VIRUSTOTAL_API_KEY')
        if not self.api_key:
            raise ValueError("VirusTotal API key not found. Create a .env file with VIRUSTOTAL_API_KEY=your_key")
        self.base_url = 'https://www.virustotal.com/vtapi/v2'
        
    def calculate_hashes(self, file_path):
        """Calculate MD5 and SHA-256 hashes of a file."""
        md5_hash = hashlib.md5()
        sha256_hash = hashlib.sha256()
        
        try:
            with open(file_path, 'rb') as f:
                for chunk in iter(lambda: f.read(4096), b''):
                    md5_hash.update(chunk)
                    sha256_hash.update(chunk)
                    
            return {
                'md5': md5_hash.hexdigest(),
                'sha256': sha256_hash.hexdigest()
            }
        except Exception as e:
            print(f"Error calculating hashes for {file_path}: {str(e)}")
            return None

    def check_hash(self, file_hash):
        """Check a hash using the VirusTotal API."""
        params = {
            'apikey': self.api_key,
            'resource': file_hash
        }
        
        try:
            response = requests.get(f'{self.base_url}/file/report', params=params)
            if response.status_code == 200:
                return response.json()
            elif response.status_code == 204:
                print("API limit reached. Waiting 60 seconds...")
                sleep(60)
                return self.check_hash(file_hash)
            else:
                print(f"Error checking hash: {response.status_code}")
                return None
        except Exception as e:
            print(f"Error during VirusTotal request: {str(e)}")
            return None

    def scan_directory(self, directory_path):
        """Scan a directory for malicious files."""
        directory = Path(directory_path)
        if not directory.exists():
            print(f"Directory {directory_path} does not exist.")
            return

        print(f"Scanning directory: {directory_path}")
        for file_path in directory.rglob('*'):
            if file_path.is_file():
                print(f"\nAnalyzing: {file_path}")
                
                # Calculate hashes
                hashes = self.calculate_hashes(file_path)
                if not hashes:
                    continue

                # Check with VirusTotal
                result = self.check_hash(hashes['sha256'])
                if result:
                    if result.get('response_code') == 1:
                        positives = result.get('positives', 0)
                        total = result.get('total', 0)
                        if positives > 0:
                            print(f"⚠️  ALERT: {file_path}")
                            print(f"Positive detections: {positives}/{total}")
                            print(f"MD5: {hashes['md5']}")
                            print(f"SHA-256: {hashes['sha256']}")
                        else:
                            print(f"✅ Clean file: {file_path}")
                    else:
                        print(f"❓ File unknown to VirusTotal: {file_path}")

def main():
    try:
        scanner = MalwareScanner()
        directory = sys.argv[1] if len(sys.argv) > 1 else '.'
        scanner.scan_directory(directory)
    except KeyboardInterrupt:
        print("\nScan interrupted by user.")
    except Exception as e:
        print(f"Error: {str(e)}")

if __name__ == '__main__':
    main()
